# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

require 'yaml'
pubspec = YAML.load_file( "../../pubspec.yaml")
version_name = pubspec['version']

scheme = "Runner"

default_platform(:ios)

# Load Dart defines from dart_define.json
def load_dart_defines
  file_path = '../dart_define.json' # Adjust the path according to your project structure
  dart_defines = JSON.parse(File.read(file_path))
  dart_defines.each do |key, value|
    ENV[key] = value
  end
end

platform :ios do
   lane :import_certificate_from_github do
       apple_intermediate_certificate_path = "/tmp/AppleWWDRCAG3.cer"
       `curl https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer --output #{apple_intermediate_certificate_path}`
       import_certificate(keychain_name: "login", certificate_path: apple_intermediate_certificate_path)
       if ENV['BASE64_BASIC_AUTH_CERTS_REPO']
         match(git_url: "https://github.com/meltzow/deck-ng-certs.git" , type: "appstore", git_basic_authorization: ENV['BASE64_BASIC_AUTH_CERTS_REPO'] , readonly: true)
       else
         match(git_url: "git@github.com:meltzow/deck-ng-certs.git", type: "appstore", readonly: true)
       end
   end

   lane :build do
       load_dart_defines # Load and set Dart defines as environment variables
       import_certificate_from_github
       build_app(scheme: scheme, clean: true, export_method: 'app-store')
   end

  lane :release do |options|
#     ensure_git_branch(branch: 'main')
    setup_ci

    app_store_connect_api_key(key_id: ENV['FASTLANE_APPLE_API_KEY_ID'], issuer_id: ENV['FASTLANE_APPLE_API_ISSUER_ID'], key_content: ENV['FASTLANE_APPLE_API_KEY'])

    increment_version_number(version_number: version_name)
    previous_build_number_beta = latest_testflight_build_number(app_identifier:ENV["APP_IDENTIFIER"])
    previous_build_number_prod = app_store_build_number(app_identifier: ENV["APP_IDENTIFIER"])
    previous_build_number = [previous_build_number_beta, previous_build_number_prod].max
    current_build_number = previous_build_number + 1

    increment_build_number(build_number: current_build_number)

    build

    if options[:track] == 'beta'
      identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
      upload_to_testflight(app_identifier: identifier, skip_waiting_for_build_processing: true, itc_provider: "F3C769M2C7", app_version: version_name )
    else
      upload_to_app_store(app_version: version_name, force: true, run_precheck_before_submit: false, submission_information: {
                                                                add_id_info_uses_idfa: false,
                                                                export_compliance_platform: 'ios',
                                                                export_compliance_compliance_required: false,
                                                                export_compliance_encryption_updated: false,
                                                                export_compliance_app_type: nil,
                                                                export_compliance_uses_encryption: false,
                                                                export_compliance_is_exempt: false,
                                                                export_compliance_contains_third_party_cryptography: false,
                                                                export_compliance_contains_proprietary_cryptography: false,
                                                                export_compliance_available_on_french_store: false
                                                          },
                                                           app_review_information: {
                                                             demo_user: ENV["DEMO_USER"],
                                                             demo_password: ENV["DEMO_PASSWORD"],
                                                           })
    end
  end

  lane :beta do
    release(track: 'beta')
#     update_app_identifier(xcodeproj: project, plist_path: "App/Info.plist", app_identifier: identifier)
#     update_info_plist(xcodeproj: project, plist_path: "App/Info.plist", display_name: ENV["APP_NAME"])
    notification(subtitle: "Finished Building", message: "App uploaded")
  end

  lane :sim do
    build_app(clean: true, scheme: scheme, skip_package_ipa: true, skip_archive: true, destination: "platform=iOS Simulator,name=iPhone 15")
  end

  lane :snapshots do
    capture_ios_screenshots(scheme: scheme, reinstall_app: true, override_status_bar: true, concurrent_simulators: true, disable_slide_to_type: true)
   end

   lane :screenshots do
     frame_screenshots(silver: true, path: "./fastlane/screenshots")
   end
end

lane :tests_ios do
  run_tests(scheme: scheme)
end