ios_path = "./ios/App/"
project = ios_path + "App.xcodeproj"
workspace = ios_path + "App.xcworkspace"
gradle_file_path = "./android/app/build.gradle"
scheme = "App"
package = read_json(json_path: "./package.json")
version = package[:version]
android_project_dir = "./android"

platform :ios do
  lane :build do |options|
    ensure_git_branch(branch: 'master')

    if ENV['BASE64_BASIC_AUTH_CERTS_REPO']
      apple_intermediate_certificate_path = "/tmp/AppleWWDRCAG3.cer"
      `curl https://www.apple.com/certificateauthority/AppleWWDRCAG3.cer --output #{apple_intermediate_certificate_path}`
      import_certificate(keychain_name: "login", certificate_path: apple_intermediate_certificate_path)
      match(git_url: "https://github.com/meltzow/deck-ng-certs.git" , type: "appstore", git_basic_authorization: ENV['BASE64_BASIC_AUTH_CERTS_REPO'] , readonly: true)
    else
      match(git_url: "git@github.com:meltzow/deck-ng-certs.git", type: "appstore", readonly: false)
    end

    bundle_install
    sh "cd .. && ionic cap sync ios"

    increment_version_number(
           version_number: version,      # specify specific version number (optional, omitting it increments patch version number)
           xcodeproj: project # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)
         )
    previous_build_number_beta = latest_testflight_build_number(app_identifier:ENV["APP_IDENTIFIER"])
    previous_build_number_prod = app_store_build_number(app_identifier: ENV["APP_IDENTIFIER"])
    previous_build_number = [previous_build_number_beta, previous_build_number_prod].max
    current_build_number = previous_build_number + 1

    increment_build_number(xcodeproj: project, build_number: current_build_number)

    build_app(clean: true, scheme: scheme, workspace: workspace)

    if options[:track] == 'beta'
      upload_to_testflight(app_identifier: identifier, skip_waiting_for_build_processing: true, itc_provider: "F3C769M2C7", app_version: version )
    else
      upload_to_app_store(app_version: version, submission_information: {
                                                                add_id_info_uses_idfa: false,
                                                                export_compliance_platform: 'ios',
                                                                export_compliance_compliance_required: false,
                                                                export_compliance_encryption_updated: false,
                                                                export_compliance_app_type: nil,
                                                                export_compliance_uses_encryption: false,
                                                                export_compliance_is_exempt: false,
                                                                export_compliance_contains_third_party_cryptography: false,
                                                                export_compliance_contains_proprietary_cryptography: false,
                                                                export_compliance_available_on_french_store: false
                                                          } )                # upload your app to App Store Connect
    end
  end

  lane :beta do
    build(track: 'beta')
#     identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
#     update_app_identifier(xcodeproj: project, plist_path: "App/Info.plist", app_identifier: identifier)
#     update_info_plist(xcodeproj: project, plist_path: "App/Info.plist", display_name: ENV["APP_NAME"])
    notification(subtitle: "Finished Building", message: "App uploaded")
  end

  lane :sim do
    build_app(clean: true, scheme: scheme, workspace: workspace, skip_package_ipa: true, skip_archive: true, destination: "platform=iOS Simulator,name=iPhone 12")
  end

  lane :release do
    build(track: 'production')

    notification(subtitle: "Finished Building", message: "App uploaded")
  end
end

platform :android do
  lane :release do
    build(track: 'production')
  end

  lane :beta do
    build(track: 'beta')
  end

  lane :build do |options|
    ensure_git_branch(branch: 'master')
    sh "cd .. && ionic cap sync android"

    if ENV['GOOGLE_PLAY_JSON_KEY_DATA']
      previous_build_number_beta = google_play_track_version_codes(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], track: "beta")[0]
      previous_build_number_prod = google_play_track_version_codes(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], track: "production")[0]
    else
      previous_build_number_beta = google_play_track_version_codes(json_key_file: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], track: "beta")[0]
      previous_build_number_prod = google_play_track_version_codes(json_key_file: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], track: "production")[0]
    end

    previous_build_number = [previous_build_number_beta, previous_build_number_prod].max
    current_build_number = previous_build_number + 1

    android_set_version_code(version_code: current_build_number, gradle_file: gradle_file_path)
    android_set_version_name(version_name: version, gradle_file: gradle_file_path )
    gradle(
          task: 'clean bundle',
          build_type: 'Release',
          project_dir: android_project_dir,
          properties: {
              "android.injected.signing.store.file" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PATH"],
              "android.injected.signing.store.password" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PASSWORD"],
              "android.injected.signing.key.alias" => "upload",
              "android.injected.signing.key.password" => ENV["FASTLANE_ANDROID_SIGNING_KEY_PASSWORD"],
            }
        )
    if ENV['GOOGLE_PLAY_JSON_KEY_DATA']
      upload_to_play_store(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], skip_upload_apk: true, track: options[:track])
    else
      upload_to_play_store(json_key: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], skip_upload_apk: true, track: options[:track])
    end
  end

  lane :snapshots do
      sh "ionic cap build android && ionic cap update android"
#     gradle(
#           task: 'clean',
#           project_dir: android_project_dir
#      )
    build_android_app(
      task: 'assemble',
      build_type: 'Debug',
      project_dir: android_project_dir
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest',
      project_dir: android_project_dir
    )
    capture_android_screenshots(device_type: 'phone', reinstall_app: true)
  end
end

lane :tests_ios do
  run_tests(scheme: scheme, workspace: workspace)
end

lane :update_metadata do
  upload_to_play_store(skip_upload_apk: true,
 skip_upload_aab: true,
 skip_upload_changelogs: true)
end

lane :compile do
  sh "ionic cap build android && ionic cap update android"
end
