ios_path = "./ios/App/"
project = ios_path + "App.xcodeproj"
workspace = ios_path + "App.xcworkspace"
gradle_file_path = "./android/app/build.gradle"
scheme = "App"
package = read_json(json_path: "./package.json")
version = package[:version]
android_project_dir = "./android"

platform :ios do
# npm install && ionic cap sync
  desc "Push a new beta build to TestFlight"
  lane :beta do
    ensure_git_branch(branch: ENV["BRANCH_NAME"])
  #   ensure_git_status_clean

    match(type: "appstore", readonly: is_ci)

    # not working currently
#     sh "npm run build-ios-ci"
    bundle_install
    sh "cd .. && ionic capacitor sync ios"

    increment_version_number(
       version_number: version,      # specify specific version number (optional, omitting it increments patch version number)
       xcodeproj: project # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)
     )
    app_version = latest_testflight_build_number(version:ENV["APP_VERSION"], app_identifier:ENV["APP_IDENTIFIER"])
    increment_build_number(xcodeproj: project, build_number: app_version+1)
    identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    update_app_identifier(xcodeproj: project, plist_path: "App/Info.plist", app_identifier: identifier)
    update_info_plist(xcodeproj: project, plist_path: "App/Info.plist", display_name: ENV["APP_NAME"])
    api_environment = "Release"
    build_app(clean: true, scheme: scheme,workspace: workspace)

    upload_to_testflight(app_identifier: identifier, skip_waiting_for_build_processing: true, itc_provider: "F3C769M2C7", app_version: version )
    clean_build_artifacts
    notification(subtitle: "Finished Building", message: "App uploaded")
  end

  lane :sim do
    build_app(clean: true, scheme: scheme, workspace: workspace, skip_package_ipa: true, skip_archive: true, destination: "platform=iOS Simulator,name=iPhone 12")
  end

  lane :release do
    increment_version_number(
         version_number: version,      # specify specific version number (optional, omitting it increments patch version number)
         xcodeproj: project # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)
       )
    app_version = latest_testflight_build_number(version:ENV["APP_VERSION"], app_identifier:ENV["APP_IDENTIFIER"])
    increment_build_number(xcodeproj: project, build_number: app_version+1)
    #capture_screensh ots(project: project)                  # generate new screenshots for the App Store
  #   sync_code_signing(type: "appstore")# see code signing guide for more information
    match(type: "appstore", readonly: is_ci)
    sh "cd .. && ionic capacitor sync ios"
    build_app(clean: true,scheme: scheme, workspace: workspace)
    upload_to_app_store(app_version: version, submission_information: {
                                                          add_id_info_uses_idfa: false,
                                                          export_compliance_platform: 'ios',
                                                          export_compliance_compliance_required: false,
                                                          export_compliance_encryption_updated: false,
                                                          export_compliance_app_type: nil,
                                                          export_compliance_uses_encryption: false,
                                                          export_compliance_is_exempt: false,
                                                          export_compliance_contains_third_party_cryptography: false,
                                                          export_compliance_contains_proprietary_cryptography: false,
                                                          export_compliance_available_on_french_store: false
                                                    } )                # upload your app to App Store Connect
    notification(subtitle: "Finished Building", message: "App uploaded")
    clean_build_artifacts
  end
end

platform :android do
  lane :release do
    sh "cd .. && ionic capacitor sync android"
    # android
    previous_build_number = google_play_track_version_codes(
      track: "production"
    )[0]
    previous_build_number = android_set_version_code(
      gradle_file: gradle_file_path # optional
     )

    current_build_number = previous_build_number + 1

    android_set_version_code(
        gradle_file: gradle_file_path # optional
      )
     android_set_version_name(
         version_name: version,
         gradle_file: gradle_file_path # optional
       )

    gradle(
      task: 'clean bundle',
      build_type: 'Release',
      project_dir: android_project_dir,
      properties: {
          "android.injected.signing.store.file" => "/home/mario/Nextcloud/infra/google play/upload-keystore.jks",
          "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
          "android.injected.signing.key.alias" => "upload",
          "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
        }
    )
    upload_to_play_store(skip_upload_apk: true, track: "production")
    notification(subtitle: "Finished Building", message: "App uploaded")
  end

  lane :beta do

      sh "cd .. && ionic capacitor sync android"
      # android
      previous_build_number = google_play_track_version_codes(
        track: "beta"
      )[0]
      previous_build_number = android_set_version_code(
        gradle_file: gradle_file_path # optional
       )

      current_build_number = previous_build_number + 1

      android_set_version_code(
          gradle_file: gradle_file_path # optional
        )
       android_set_version_name(
           version_name: version,
           gradle_file: gradle_file_path # optional
         )

      gradle(
        task: 'clean bundle',
        build_type: 'Release',
        project_dir: android_project_dir,
        properties: {
            "android.injected.signing.store.file" => "/home/mario/Nextcloud/infra/google play/upload-keystore.jks",
            "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
            "android.injected.signing.key.alias" => "upload",
            "android.injected.signing.key.password" => ENV["KEY_PASSWORD"],
          }
      )
      upload_to_play_store(skip_upload_apk: true, track: "beta")
      notification(subtitle: "Finished Building", message: "App uploaded")
    end

  lane :snapshots do
      sh "cd .. && ionic capacitor sync android"
#     gradle(
#           task: 'clean',
#           project_dir: android_project_dir
#      )
    build_android_app(
      task: 'assemble',
      build_type: 'Debug',
      project_dir: android_project_dir
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest',
      project_dir: android_project_dir
    )
    capture_android_screenshots(device_type: 'phone', reinstall_app: true)
  end
end

lane :tests_ios do
  run_tests(scheme: scheme, workspace: workspace)
end

lane :update_metadata do
  upload_to_play_store(skip_upload_apk: true,
 skip_upload_aab: true,
 skip_upload_changelogs: true)
end

lane :compile do
  sh "cd .. && ionic capacitor sync android"
end
