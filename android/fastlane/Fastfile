# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

require 'yaml'
pubspec = YAML.load_file( "../../pubspec.yaml")
version_name = pubspec['version']

default_platform(:android)

# Load Dart defines from dart_define.json
def load_dart_defines
  file_path = '../dart_define.json' # Adjust the path according to your project structure
  dart_defines = JSON.parse(File.read(file_path))
  dart_defines.each do |key, value|
    ENV[key] = value
  end
end

platform :android do
  lane :production do
    deploy(track: 'production')
  end

  lane :beta do
    deploy(track: 'beta')
  end

  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  lane :build do
    load_dart_defines # Load and set Dart defines as environment variables
    gradle(
        task: 'bundle',
        build_type: 'Release',
        properties: {
        "android.injected.signing.store.file" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PATH"],
        "android.injected.signing.store.password" => ENV["FASTLANE_ANDROID_SIGNING_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => "upload",
        "android.injected.signing.key.password" => ENV["FASTLANE_ANDROID_SIGNING_KEY_PASSWORD"],
        }
    )
  end

  desc "Deploy a new version to the Google Play"
  lane :release do |options|
      if ENV['GOOGLE_PLAY_JSON_KEY_DATA']
        previous_build_number_beta = google_play_track_version_codes(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], track: "beta")[0]
        previous_build_number_prod = google_play_track_version_codes(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], track: "production")[0]
      elsif ENV['GOOGLE_PLAY_JSON_KEY_FILE']
        previous_build_number_beta = google_play_track_version_codes(json_key: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], track: "beta")[0]
        previous_build_number_prod = google_play_track_version_codes(json_key: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], track: "production")[0]
      else
        sh "echo you must set GOOGLE_PLAY_JSON_KEY_DATA or GOOGLE_PLAY_JSON_KEY_FILE in your environment"
      end

      previous_build_number = [previous_build_number_beta, previous_build_number_prod].max
      current_build_number = previous_build_number + 1

      android_set_version_code(version_code: current_build_number)
      android_set_version_name(version_name: %Q['#{version_name}'])

      build
      if ENV['GOOGLE_PLAY_JSON_KEY_DATA']
        upload_to_play_store(json_key_data: ENV['GOOGLE_PLAY_JSON_KEY_DATA'], skip_upload_apk: true, track: options[:track], aab: '../build/app/outputs/bundle/release/app-release.aab' )
      else
        upload_to_play_store(json_key: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], skip_upload_apk: true, track: options[:track], aab: '../build/app/outputs/bundle/release/app-release.aab')
      end
    end

lane :update_metadata do
   upload_to_play_store(json_key: ENV['GOOGLE_PLAY_JSON_KEY_FILE'], skip_upload_apk: true, skip_upload_aab: true, skip_upload_changelogs: true, track: "beta")
end


  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta_bkp do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end



end
